type Marketplace @entity {
  id: Bytes!

  protocolFee: BigDecimal!
}

type Collection @entity {
  id: Bytes!

  name: String
  "TODO"
  symbol: String
  "TODO"
  address: Bytes!
  standard: TokenStandard!

  owners: [User!]!
  tokens: [Token!]! @derivedFrom(field: "collection")
  totalItems: BigInt!
  totalOwners: BigInt!

  floorPrice: BigInt!
  listings: [Listing!]! @derivedFrom(field: "collection")
  totalListings: BigInt!
  totalSales: BigInt!
  totalVolume: BigInt!

  " Royalty fee rate in percentage. E.g. 2.5% should be 2.5 "
  royaltyFee: BigInt!

  " Cumulative trade volume (in ETH) "
  cumulativeTradeVolumeETH: BigDecimal!

  " Cumulative trade volume (in TRV) "
  cumulativeTradeVolumeTRV: BigDecimal!

  " Cumulative trade volume (in USD) "
  cumulativeTradeVolumeUSD: BigDecimal!

  " Revenue in ETH that goes to the marketplace protocol, aka protocol fee. "
  marketplaceRevenueETH: BigDecimal!

  " Revenue in TRV that goes to the marketplace protocol, aka protocol fee. "
  marketplaceRevenueTRV: BigDecimal!

  " Revenue in USD that goes to the marketplace protocol, aka protocol fee. "
  marketplaceRevenueUSD: BigDecimal!

  " Revenue in ETH that goes to creator, aka royalty fee. "
  creatorRevenueETH: BigDecimal!

  " Revenue in TRV that goes to creator, aka royalty fee. "
  creatorRevenueTRV: BigDecimal!

  " Revenue in USD that goes to creator, aka royalty fee. "
  creatorRevenueUSD: BigDecimal!

  " Sum of marketplaceRevenueETH and creatorRevenueETH. "
  totalRevenueETH: BigDecimal!

  " Sum of marketplaceRevenueUSD and creatorRevenueUSD. "
  totalRevenueUSD: BigDecimal!

  " Trade count of the collection on the marketplace. "
  tradeCount: Int!

  " Buyer count. "
  buyerCount: Int!

  " Seller count. "
  sellerCount: Int!

  " Trades of the collection. "
  trades: [Trade!]! @derivedFrom(field: "collection")

  " Collection daily snapshots. "
  snapshots: [CollectionDailySnapshot!]! @derivedFrom(field: "collection")
}

type Token @entity {
  id: Bytes!

  collection: Collection!
  tokenId: BigInt!

  "Owner of token for ERC721, null for ERC1155"
  owner: User
  "Owners of token for ERC1155"
  owners: [UserToken!]! @derivedFrom(field: "token")

  listings: [Listing!]! @derivedFrom(field: "token")
  floorPrice: BigInt

  trades: [Trade!]! @derivedFrom(field: "token")
}

type Trade @entity(immutable: true) {
  id: Bytes!

  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!

  collection: Collection!
  token: Token!
  from: User!
  to: User!

  quantity: BigInt!
  pricePerItem: BigInt!
  paymentToken: Bytes!
}

type Listing @entity {
  id: Bytes!

  collection: Collection!
  token: Token!
  seller: User!

  quantity: BigInt!
  pricePerItem: BigInt!
  paymentToken: Bytes!
  expirationTime: BigInt!

  buyer: User
}

type TokenBid @entity {
  id: Bytes!

  collection: Collection!
  token: Token!
  bidder: User!
}

type CollectionBid @entity {
  id: Bytes!

  collection: Collection!
  bidder: User!
}

type User @entity {
  id: Bytes!

  tokens: [UserToken!]! @derivedFrom(field: "user")
  listings: [Listing!]! @derivedFrom(field: "seller")
  tokenBids: [TokenBid!]! @derivedFrom(field: "bidder")
  collectionBids: [CollectionBid!]! @derivedFrom(field: "bidder")

  trades: [Trade!]! @derivedFrom(field: "from") @derivedFrom(field: "to")
}

type UserToken @entity {
  id: Bytes!
  user: User!
  token: Token!
  quantity: BigInt!
}

type CollectionDailySnapshot @entity {
  " { Contract address }-{# of days since epoch unix time } "
  id: Bytes!

  " The collection that this snapshot belongs to. "
  collection: Collection!

  " Block number where the snapshot is taken. "
  blockNumber: BigInt!

  " Block timestamp when the snapshot is taken. "
  timestamp: BigInt!

  " Royalty fee rate in percentage. E.g. 2.5% should be 2.5 "
  royaltyFee: BigInt!

  " Minimum sale price of the day (in ETH) "
  dailyMinSalePriceETH: BigDecimal!

  " Minimum sale price of the day (in TRV) "
  dailyMinSalePriceTRV: BigDecimal!

  " Minimum sale price of the day (in USD) "
  dailyMinSalePriceUSD: BigDecimal!

  " Maximum sale price of the day (in ETH) "
  dailyMaxSalePriceETH: BigDecimal!

  " Maximum sale price of the day (in TRV) "
  dailyMaxSalePriceTRV: BigDecimal!

  " Maximum sale price of the day (in USD) "
  dailyMaxSalePriceUSD: BigDecimal!

  " Cumulative trade volume (in ETH) "
  cumulativeTradeVolumeETH: BigDecimal!

  " Cumulative trade volume (in TRV) "
  cumulativeTradeVolumeTRV: BigDecimal!

  " Cumulative trade volume (in USD) "
  cumulativeTradeVolumeUSD: BigDecimal!

  " Daily trade volume (in ETH) "
  dailyTradeVolumeETH: BigDecimal!

  " Daily trade volume (in TRV) "
  dailyTradeVolumeTRV: BigDecimal!

  " Daily trade volume (in USD) "
  dailyTradeVolumeUSD: BigDecimal!

  " Revenue in ETH that goes to the marketplace protocol, aka protocol fee. "
  marketplaceRevenueETH: BigDecimal!

  " Revenue in TRV that goes to the marketplace protocol, aka protocol fee. "
  marketplaceRevenueTRV: BigDecimal!

  " Revenue in USD that goes to the marketplace protocol, aka protocol fee. "
  marketplaceRevenueUSD: BigDecimal!

  " Revenue in ETH that goes to creator, aka royalty fee. "
  creatorRevenueETH: BigDecimal!

  " Revenue in TRV that goes to creator, aka royalty fee. "
  creatorRevenueTRV: BigDecimal!

  " Revenue in USD that goes to creator, aka royalty fee. "
  creatorRevenueUSD: BigDecimal!

  " Sum of marketplaceRevenueETH and creatorRevenueETH. "
  totalRevenueETH: BigDecimal!

  " Sum of marketplaceRevenueUSD and creatorRevenueUSD. "
  totalRevenueUSD: BigDecimal!

  " Trade count of the collection on the marketplace. "
  tradeCount: Int!

  " Number of traded items of the day. "
  dailyTradedItemCount: Int!
}

enum TokenStandard {
  ERC721
  ERC1155
  UNKNOWN
}
